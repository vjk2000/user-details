name: Playwright CI (build+serve)

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PLAYWRIGHT_BASE_URL: http://localhost:3000
      MOCK_API_URL: http://localhost:5000
      # If your frontend uses CRA, set REACT_APP_API_BASE_URL
      # If Vite, set VITE_API_URL instead. Set the one your app reads.
      REACT_APP_API_BASE_URL: http://localhost:5000
      VITE_API_URL: http://localhost:5000

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Start mock API (background)
        run: |
          node tests/start-mock-server.js > mock-server.log 2>&1 &
          echo $! > .mock_pid
          echo "Mock API started (pid $(cat .mock_pid))"

      - name: Build frontend
        # Important: set the env var your build reads (REACT_APP_*/VITE_*)
        # This bakes the API URL into the static bundle so it calls the mock server at runtime.
        env:
          REACT_APP_API_BASE_URL: ${{ env.MOCK_API_URL }}
          VITE_API_URL: ${{ env.MOCK_API_URL }}
        run: |
          # Replace with your actual build command:
          # CRA -> npm run build  (output: ./build)
          # Vite -> npm run build (output: ./dist)
          npm run build
          ls -la

      - name: Serve static build (background)
        run: |
          # If CRA -> serve ./build ; if Vite -> serve ./dist
          # We try build -> ./build first, fallback to ./dist.
          if [ -d "./build" ]; then
            npx serve -s build -l 3000 > frontend.log 2>&1 &
          elif [ -d "./dist" ]; then
            npx serve -s dist -l 3000 > frontend.log 2>&1 &
          else
            echo "No build output found (no ./build or ./dist). Aborting."
            exit 1
          fi
          echo $! > .frontend_pid
          echo "Frontend served (pid $(cat .frontend_pid)). Logs -> frontend.log"

      - name: Wait for services (curl loop)
        run: |
          set -e
          echo "Checking mock API and frontend up..."
          max_retries=30
          retry=0
          until curl -sSf http://localhost:5000/api/health >/dev/null 2>&1 && curl -sSf http://localhost:3000/ >/dev/null 2>&1; do
            retry=$((retry+1))
            echo "Waiting for services to respond (attempt $retry/$max_retries)..."
            if [ "$retry" -ge "$max_retries" ]; then
              echo "Services did not become ready in time. Dumping logs for debugging:"
              echo "---- mock-server.log ----"
              sed -n '1,200p' mock-server.log || true
              echo "---- frontend.log ----"
              sed -n '1,200p' frontend.log || true
              exit 1
            fi
            sleep 2
          done
          echo "Services are ready."

      - name: Install Playwright browsers (fast path)
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.PLAYWRIGHT_BASE_URL }}
        run: npx playwright test --reporter=list

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: |
            mock-server.log
            frontend.log
