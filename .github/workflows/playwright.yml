name: Playwright CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # set the baseURL that your tests rely on (page.goto('/signin') -> http://localhost:3000/signin)
      PLAYWRIGHT_BASE_URL: http://localhost:3000
      MOCK_API_URL: http://localhost:5000

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright browsers (if cache miss)
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      # Start mock API
      - name: Start mock API (background)
        run: |
          # start mock server in background and save pid
          node tests/start-mock-server.js > mock-server.log 2>&1 &
          echo $! > .mock_pid
          echo "Mock API started (pid $(cat .mock_pid)). Logs -> mock-server.log"

      # Start frontend (adjust the command to your project e.g. `npm run dev` or `npm start`)
      - name: Start frontend (background)
        run: |
          # change `npm run start` to your actual dev command if different (e.g., npm run dev)
          npm run start > frontend.log 2>&1 &
          echo $! > .frontend_pid
          echo "Frontend started (pid $(cat .frontend_pid)). Logs -> frontend.log"

      # Wait for both servers to be available
      - name: Wait for services to be ready
        run: |
          # wait-on is available via npx without installing as a dev dep
          npx wait-on http://localhost:5000 || (cat mock-server.log && exit 1)
          npx wait-on ${PLAYWRIGHT_BASE_URL} || (cat frontend.log && exit 1)
          echo "Both mock API and frontend are responding."

      - name: Run Playwright tests
        run: npx playwright test --reporter=list

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

      - name: Upload logs (mock + frontend) for debugging
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: |
            mock-server.log
            frontend.log
